<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on michael-0acf4</title><link>https://michael-0acf4.github.io/tags/programming/</link><description>Recent content in Programming on michael-0acf4</description><generator>Hugo</generator><language>en-us</language><copyright>© michael-0acf4</copyright><lastBuildDate>Sun, 14 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://michael-0acf4.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Option is a monad</title><link>https://michael-0acf4.github.io/posts/2024/option-is-a-monad/</link><pubDate>Sun, 14 Apr 2024 00:00:00 +0000</pubDate><guid>https://michael-0acf4.github.io/posts/2024/option-is-a-monad/</guid><description>&lt;p>Let&amp;rsquo;s dive a bit into a little Haskell journey to prove that the well known &lt;code>Option&lt;/code> data type, can behave like a Monad, we’ll also see how it relates to a Functor, Applicative, and more.&lt;/p>
&lt;h1 id="what-is-a-monad">What is a monad?&lt;/h1>
&lt;p>For practical purposes, let&amp;rsquo;s just see what it does. Then try to define it later.&lt;/p>
&lt;h2 id="step-1-defining-the-option-type">Step 1: Defining the &lt;code>Option&lt;/code> Type&lt;/h2>
&lt;p>To begin, we define our type:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-haskell" data-lang="haskell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">data&lt;/span> &lt;span style="color:#66d9ef">Option&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">Some&lt;/span> a &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">deriving&lt;/span> (&lt;span style="color:#66d9ef">Show&lt;/span>, &lt;span style="color:#66d9ef">Eq&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a simple &amp;ldquo;optional&amp;rdquo; type. If you’ve worked with &lt;code>Maybe&lt;/code>, this will be very familiar. &lt;code>Option&lt;/code> can either hold a value (&lt;code>Some a&lt;/code>) or be empty (&lt;code>None&lt;/code>).&lt;/p></description></item></channel></rss>