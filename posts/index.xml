<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on michael-0acf4</title><link>https://michael-0acf4.github.io/posts/</link><description>Recent content in Posts on michael-0acf4</description><generator>Hugo</generator><language>en-us</language><copyright>© michael-0acf4</copyright><lastBuildDate>Mon, 14 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://michael-0acf4.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Why cheap manual treadmills can still be accurate</title><link>https://michael-0acf4.github.io/posts/2025/cheap-treadmills-can-be-accurate/</link><pubDate>Mon, 14 Apr 2025 00:00:00 +0000</pubDate><guid>https://michael-0acf4.github.io/posts/2025/cheap-treadmills-can-be-accurate/</guid><description>&lt;h1 id="define-cheap">Define cheap&lt;/h1>
&lt;p>I would define cheap with the following criteria:&lt;/p>
&lt;ul>
&lt;li>Below average price&lt;/li>
&lt;li>Purely manual&lt;/li>
&lt;li>Noticibly inaccurate (but consistent) measurements&lt;/li>
&lt;/ul>
&lt;p>Measuring time shouldn&amp;rsquo;t be a problem, and one can easily assume it is just as accurate as any time measured on an actual watch.&lt;/p>
&lt;p>How do you know if the measurements are consistent?&lt;/p>
&lt;p>Everything can be derived from speed and time (calories, total distance).
If your treadmill is telling you some consistent measurement each time you use it over multiple session, each roughly of the same duration, then even if the measurment is completly inacurate, it should be good enough.&lt;/p></description></item><item><title>How (not) to overengineer the 3 Episode Rule</title><link>https://michael-0acf4.github.io/posts/2024/overengineer-the-3-episode-rule/</link><pubDate>Sun, 06 Oct 2024 00:00:00 +0000</pubDate><guid>https://michael-0acf4.github.io/posts/2024/overengineer-the-3-episode-rule/</guid><description>&lt;p>As you get older, the number of shows you watch slowly decreases over time. Then, before you realize it, you&amp;rsquo;ve lost the ability to binge-watch multiple seasons in a single day.&lt;/p>
&lt;p>This often happens because, even if a show is good, the same tropes are overused. You end up being able to predict what will happen next with a high degree of confidence, which takes away a lot of the fun.&lt;/p></description></item><item><title>Option is a monad</title><link>https://michael-0acf4.github.io/posts/2024/option-is-a-monad/</link><pubDate>Sun, 14 Apr 2024 00:00:00 +0000</pubDate><guid>https://michael-0acf4.github.io/posts/2024/option-is-a-monad/</guid><description>&lt;p>Let&amp;rsquo;s dive a bit into a little Haskell journey to prove that the well known &lt;code>Option&lt;/code> data type, can behave like a Monad, we’ll also see how it relates to a Functor, Applicative, and more.&lt;/p>
&lt;h1 id="what-is-a-monad">What is a monad?&lt;/h1>
&lt;p>For practical purposes, let&amp;rsquo;s just see what it does. Then try to define it later.&lt;/p>
&lt;h2 id="step-1-defining-the-option-type">Step 1: Defining the &lt;code>Option&lt;/code> Type&lt;/h2>
&lt;p>To begin, we define our type:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-haskell" data-lang="haskell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">data&lt;/span> &lt;span style="color:#66d9ef">Option&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">Some&lt;/span> a &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">deriving&lt;/span> (&lt;span style="color:#66d9ef">Show&lt;/span>, &lt;span style="color:#66d9ef">Eq&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a simple &amp;ldquo;optional&amp;rdquo; type. If you’ve worked with &lt;code>Maybe&lt;/code>, this will be very familiar. &lt;code>Option&lt;/code> can either hold a value (&lt;code>Some a&lt;/code>) or be empty (&lt;code>None&lt;/code>).&lt;/p></description></item></channel></rss>